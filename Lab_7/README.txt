Для чого призначений Collections Framework?

Для роботи зі структурами даних: зберігання, пошук, сортування, маніпуляція елементами.
В чому полягає різниця між масивами та колекціями?

Масиви мають фіксований розмір і тип, колекції динамічні, можуть змінювати розмір і підтримують більшу кількість операцій.
Які особливі властивості є у списків порівняно з іншими типами колекцій?

Списки (List) зберігають порядок додавання елементів і допускають доступ до елементів за індексом.
Чим списки відрізняються від масивів?

Списки динамічні, дозволяють змінювати розмір, підтримують багатий набір методів для роботи з даними.
Чим ArrayList відрізняється від LinkedList? Який з них у яких випадках краще використовувати?

ArrayList: швидкий доступ за індексом, повільна вставка/видалення.
LinkedList: швидка вставка/видалення, повільний доступ за індексом.
Використовувати ArrayList для читання, LinkedList для частих змін.
Що таке Iterator? В чому переваги використання ітератора у порівнянні з класичним циклом?

Iterator: об’єкт для послідовного доступу до елементів колекції.
Переваги:
Універсальний для всіх типів колекцій.
Захищає від помилок модифікації колекції під час ітерації.
Що таке типізовані та нетипізовані колекції?

Типізовані: використовують Generics, забезпечують контроль типів на рівні компіляції.
Нетипізовані: дозволяють зберігати об’єкти різних типів, менш безпечні.
Для чого потрібен інтерфейс RandomAccess?

Вказує, що колекція дозволяє швидкий доступ до елементів за індексом (наприклад, ArrayList).
Чим Collection відрізняється від Collections?

Collection: базовий інтерфейс для колекцій (наприклад, List, Set).
Collections: утилітний клас для маніпуляції колекціями (наприклад, сортування, пошук).