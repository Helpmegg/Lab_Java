1. Порівняння методів сортування:

Сортування бульбашкою (Bubble Sort):

Переваги: Простий у розумінні та реалізації. Добре підходить для навчання.
Недоліки: Дуже повільний на великих масивах, особливо якщо вони вже частково відсортовані. Не підходить для великих обсягів даних.
Сортування вибором (Selection Sort):

Переваги: Легко реалізується. Мінімум обмінів, оскільки на кожній ітерації виконується лише одна перестановка.
Недоліки: Незалежно від відсортованості масиву, потребує O(n^2) порівнянь, тому для великих обсягів даних він неефективний.
Сортування вставкою (Insertion Sort):

Переваги: Ефективний для майже відсортованих масивів, працює швидко при малих обсягах даних. Стабільний.
Недоліки: Повільний для великих масивів, особливо якщо масив відсортований у зворотному порядку.
2. Оцінка методів за критеріями:

Час роботи:

Сортування бульбашкою: O(n^2) у середньому та найгіршому випадках, O(n) у найкращому випадку (якщо масив уже відсортований).
Сортування вибором: O(n^2) у всіх випадках, бо завжди потрібно порівнювати всі елементи.
Сортування вставкою: O(n^2) у середньому та найгіршому випадках, O(n) у найкращому випадку (для майже відсортованих масивів).
Потреби у додатковій пам'яті:

Усі три алгоритми є "in-place" методами сортування, тобто не потребують додаткової пам'яті, окрім змінних для обміну елементів.
Стабільність:

Сортування бульбашкою: стабільний алгоритм, зберігає порядок однакових елементів.
Сортування вибором: нестабільний, може змінювати порядок однакових елементів.
Сортування вставкою: стабільний.
Додаткові критерії для порівняння:

Простота реалізації.
Адаптивність до вже частково відсортованих масивів.
Підтримка паралельної обробки (якщо методи можуть бути оптимізовані для роботи на багатоядерних системах).
3. Найкращі та найгірші випадки для роботи алгоритмів:

Сортування бульбашкою: Найкращий випадок – вже відсортований масив, де час роботи O(n). Найгірший випадок – зворотно відсортований масив, де час роботи O(n^2).

Сортування вибором: Незалежно від впорядкованості масиву, цей алгоритм завжди має час роботи O(n^2).

Сортування вставкою: Найкращий випадок – майже відсортований масив, де час роботи O(n). Найгірший випадок – зворотно відсортований масив, час роботи O(n^2).

Загалом, для частково відсортованих масивів сортування вставкою буде найшвидшим, а для несортованих даних усі три алгоритми будуть повільними, проте сортування вибором у середньому буде дещо передбачуванішим.

4. Пояснення позначень O(1), O(n), O(n^2):

O(1): Постійний час, незалежно від розміру вхідних даних. Наприклад, доступ до конкретного елемента масиву.

O(n): Лінійний час, де час виконання зростає прямо пропорційно до розміру вхідних даних. Наприклад, простий прохід по масиву.

O(n^2): Квадратичний час, де час виконання зростає пропорційно квадрату розміру вхідних даних. Характерний для алгоритмів сортування, що порівнюють усі елементи масиву один з одним (наприклад, сортування бульбашкою або вибором).