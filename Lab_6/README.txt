1. Що таке immutable об’єкт? Для чого об’єкти класу String зробили імутабельними? Чому клас String задекларований як final?
Immutable об’єкт — це об’єкт, стан якого не можна змінити після його створення. Іншими словами, усі поля об’єкта є фінальними (final), і їхні значення не можна змінити після ініціалізації.

Клас String зроблений імутабельним з кількох причин:

Безпека: Імутабельність дозволяє запобігти змінам рядка в середині програми, що підвищує безпеку.
Використання в кешуванні: Імутабельні об'єкти можуть бути кешовані і повторно використовувані, що дозволяє економити пам'ять та підвищує ефективність.
Множинне використання: Імутабельні об’єкти можна безпечно використовувати в багатопоточних програмах, оскільки їх стан не змінюється.
Клас String задекларований як final, щоб неможливо було успадкувати цей клас і змінити його поведінку (що може порушити імутабельність об’єкта). У Java клас можна зробити final, щоб запобігти його розширенню.

2. Що таке регулярні вирази? Наведіть приклади регулярних виразів.
Регулярні вирази — це шаблони для пошуку та маніпулювання текстовими даними. Вони дозволяють знаходити, замінювати або перевіряти відповідність тексту за заданими критеріями.

Приклад регулярних виразів:

\d — означає цифру (від 0 до 9).
\w — означає будь-яку букву, цифру або підкреслення (a-z, A-Z, 0-9, _).
^ — позначає початок рядка.
$ — позначає кінець рядка.
a|b — означає або символ "a", або символ "b".
\s+ — один або більше пробілів.
Приклад використання:

Регулярний вираз \\d{3} знайде три цифри підряд (наприклад, "123").
3. В чому полягає різниця між оператором «==» та методом «equals()»?
Оператор ==: перевіряє, чи вказують дві змінні на один і той самий об’єкт в пам'яті. Для об'єктів це перевірка на рівність посилань (якщо обидві змінні вказують на один і той самий об’єкт).

Метод equals(): перевіряє, чи є два об'єкти логічно рівними. За замовчуванням, метод equals() перевіряє рівність за посиланням, але в багатьох класах (наприклад, у класі String) цей метод перевизначений для перевірки рівності значень об’єктів.

Приклад:

java
Копіювати код
String str1 = new String("hello");
String str2 = new String("hello");

System.out.println(str1 == str2);       // false, бо це різні об'єкти
System.out.println(str1.equals(str2));  // true, бо значення однакові
4. Для чого потрібні класи StringBuilder та StringBuffer?
Класи StringBuilder та StringBuffer використовуються для ефективного маніпулювання рядками, коли необхідно часто змінювати їх вміст (наприклад, додавати або замінювати символи).

StringBuilder: є не синхронізованим і тому більш швидким для використання в однопоточних програмах. Він підходить, коли не потрібно використовувати об'єкти з кількома потоками.
StringBuffer: є синхронізованим, що означає, що цей клас підходить для використання в багатопоточних програмах, де кілька потоків можуть одночасно змінювати один і той самий об’єкт.
Оскільки рядки в Java є імутабельними, кожен раз при їх зміні створюється новий об'єкт, що може бути неефективно при великих кількостях операцій з рядками. StringBuilder та StringBuffer дозволяють змінювати вміст рядка без створення нових об'єктів, що робить ці класи набагато швидшими та економнішими по пам'яті.

5. Яким чином простіше всього прибрати пробіли на початку та кінці об’єкту String?
Для того щоб прибрати пробіли на початку та в кінці рядка в Java, можна використати метод trim(). Цей метод видаляє всі пробіли на початку та в кінці рядка, але не впливає на пробіли всередині рядка.

Приклад:

java
Копіювати код
String str = "   Hello, world!   ";
String trimmedStr = str.trim();  // "Hello, world!"
Метод trim() не змінює сам рядок, а повертає новий, де видалено зайві пробіли.